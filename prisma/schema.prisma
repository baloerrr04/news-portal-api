// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id String @id @unique @default(uuid())

  username String
  password String
  salt     String

  role     Role      @default(USER)
  article  Article[]
  likes    Like[]
  comments Comment[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("users")
}

model Article {
  id          String     @id @unique @default(uuid())
  title       String
  content     String
  thumbnail   String?
  author      User       @relation(fields: [authorId], references: [id])
  authorId    String
  categories  Category[]
  likes       Like[]
  comments    Comment[]
  publishedAt DateTime   @default(now())

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("articles")
}

model Category {
  id       String    @id @unique @default(uuid())
  name     String
  articles Article[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("categories")
}

model Like {
  id        String  @id @default(uuid())
  article   Article @relation(fields: [articleId], references: [id])
  articleId String
  user      User    @relation(fields: [userId], references: [id])
  userId    String

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@unique([articleId, userId]) // 1 like per user per artikel
  @@map("likes")
}

model Comment {
  id        String  @id @default(uuid())
  content   String
  article   Article @relation(fields: [articleId], references: [id])
  articleId String
  user      User    @relation(fields: [userId], references: [id])
  userId    String

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("comments")
}

enum Role {
  ADMIN
  USER
}
